datasource db {
  provider = "sqlite" // or sqlite for local dev
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

//
// ðŸ”¹ Indexer progress
//
model IndexerState {
  id                     Int      @id @default(autoincrement())
  programId              String   @unique
  lastProcessedSlot      BigInt   @default(0)
  lastProcessedSignature String?
  createdAt              DateTime @default(now())
  updatedAt              DateTime @updatedAt

  @@map("indexer_state")
}

//
// ðŸ”¹ Global Config Initialization
//
model GlobalConfigCreated {
  id             String    @id @default(uuid())
  signature      String    @unique
  slot           BigInt
  blockTime      DateTime?
  admin          String
  feeBps         Int
  rBurn          Int
  rGlobal        Int
  usdcMint       String
  platformWallet String
  globalTreasury String
  ts             BigInt
  createdAt      DateTime  @default(now())

  @@map("global_config_created")
}

//
// ðŸ”¹ Fandoms
//
model FandomCreated {
  id        String    @id @default(uuid())
  signature String    @unique
  slot      BigInt
  blockTime DateTime?
  admin     String
  fandomId  String    @unique
  name      String
  ts        BigInt
  createdAt DateTime  @default(now())

  polls PollCreated[]

  @@map("fandom_created")
}

//
// ðŸ”¹ Polls
//
model PollCreated {
  id             String    @id @default(uuid())
  signature      String    @unique
  slot           BigInt
  blockTime      DateTime?
  pollId         String     @unique
  fandomId       String
  stakeYes       BigInt?   @default(0)
  stakeNo        BigInt?   @default(0)
  totalStake     BigInt?   @default(0)
  creator        String
  startTs        BigInt
  endTs          BigInt
  challengeEndTs BigInt
  status         String
  createdAt      DateTime  @default(now())

  fandom      FandomCreated     @relation(fields: [fandomId], references: [fandomId])
  votes       VoteCast[]
  disputes    DisputeOpened[]
  resolutions PollResolved[]
  settlements PollSettled[]
  rewards     RewardClaimed[]
  proposals   Proposal[]
  receipts    ProposalReceipt[]

  @@map("poll_created")
}

//
// ðŸ”¹ Votes (stake-weighted)
//
model VoteCast {
  id        String    @id @default(uuid())
  signature String    @unique
  slot      BigInt
  blockTime DateTime?
  pollId    String
  voter     String
  side      String
  stake     BigInt
  createdAt DateTime  @default(now())

  poll PollCreated @relation(fields: [pollId], references: [pollId])

  @@map("vote_cast")
}

//
// ðŸ”¹ Disputes
//
model DisputeOpened {
  id         String    @id @default(uuid())
  signature  String    @unique
  slot       BigInt
  blockTime  DateTime?
  pollId     String
  side       String
  challenger String
  stake      BigInt
  createdAt  DateTime  @default(now())

  poll PollCreated @relation(fields: [pollId], references: [pollId])

  @@map("dispute_opened")
}

//
// ðŸ”¹ Poll Resolution + Settlement
//
model PollResolved {
  id        String    @id @default(uuid())
  signature String    @unique
  slot      BigInt
  blockTime DateTime?
  pollId    String
  outcome   String
  createdAt DateTime  @default(now())

  poll PollCreated @relation(fields: [pollId], references: [pollId])

  @@map("poll_resolved")
}

model PollSettled {
  id           String    @id @default(uuid())
  signature    String    @unique
  slot         BigInt
  blockTime    DateTime?
  pollId       String
  finalOutcome String
  totalStake   BigInt
  payoutPool   BigInt
  createdAt    DateTime  @default(now())

  poll PollCreated @relation(fields: [pollId], references: [pollId])

  @@map("poll_settled")
}

//
// ðŸ”¹ Rewards (claims)
//
model RewardClaimed {
  id        String    @id @default(uuid())
  signature String    @unique
  slot      BigInt
  blockTime DateTime?
  pollId    String
  user      String
  amount    BigInt
  challenge Boolean
  createdAt DateTime  @default(now())

  poll PollCreated @relation(fields: [pollId], references: [pollId])

  @@map("reward_claimed")
}

//
// ðŸ”¹ Proposal and ProposalReceipt (for challenges)
//
model Proposal {
  id                String    @id @default(uuid())
  slot              BigInt
  signature         String    @unique
  blockTime         DateTime?
  pollId            String
  side              String
  totalStake        BigInt
  totalParticipants BigInt
  createdAt         DateTime  @default(now())

  poll PollCreated @relation(fields: [pollId], references: [pollId])

  @@map("proposal")
}

model ProposalReceipt {
  id           String    @id @default(uuid())
  signature    String?   @unique
  slot         BigInt?
  blockTime    DateTime?
  pollId       String
  side         String
  staker       String
  amountStaked BigInt
  claimed      Boolean
  createdAt    DateTime  @default(now())

  poll PollCreated @relation(fields: [pollId], references: [pollId])

  @@map("proposal_receipt")
}
