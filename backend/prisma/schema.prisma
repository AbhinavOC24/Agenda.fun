

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// Indexer state to track progress
model IndexerState {
  id                       Int      @id @default(autoincrement())
  programId                String   @unique
  lastProcessedSlot        BigInt   @default(0)
  lastProcessedSignature   String?
  createdAt                DateTime @default(now())
  updatedAt                DateTime @updatedAt
  @@map("indexer_state")
}

// Global configuration events
model GlobalConfigCreated {
  id             String   @id @default(uuid())
  signature      String   @unique
  slot           BigInt
  blockTime      DateTime?
  admin          String
  feeBps         Int
  rBurn          Int
  rGlobal        Int
  rChar          Int
  k              Int
  usdcMint       String
  platformWallet String
  globalTreasury String
  ts             BigInt
  createdAt      DateTime @default(now())
  @@map("global_config_created")
}

// --------------------
// Fandom
// --------------------
model FandomCreated {
  id         String              @id @default(uuid())
  signature  String              @unique
  slot       BigInt
  blockTime  DateTime?
  admin      String
  fandomId   Bytes               @unique // [u8;32]
  name       String
  ts         BigInt
  createdAt  DateTime            @default(now())

  // relations
  characters CharacterCreated[]
  polls      PollCreated[]

  @@map("fandom_created")
}

// --------------------
// Character
// --------------------
model CharacterCreated {
  id             String           @id @default(uuid())
  signature      String           @unique
  slot           BigInt
  blockTime      DateTime?
  charSlug       String           @unique
  stockMint      String           @unique
  supply         BigInt
  treasuryVault  String
  priceState     String
  lastPriceFp    BigInt
  weekStartTs    BigInt
  ts             BigInt
  createdAt      DateTime         @default(now())

  // relation to fandom
  fandomId       Bytes
  fandom         FandomCreated    @relation(fields: [fandomId], references: [fandomId])

  // price updates
  priceUpdates   PriceUpdate[]

  @@map("character_created")
}

// --------------------
// Price updates
// --------------------
model PriceUpdate {
  id         String             @id @default(uuid())
  signature  String             @unique
  slot       BigInt
  blockTime  DateTime?
  character  String
  priceFp    BigInt
  ts         BigInt
  createdAt  DateTime           @default(now())

  // link to character
  characterRef CharacterCreated? @relation(fields: [character], references: [charSlug])

  @@map("price_update")
}

// --------------------
// Stocks
// --------------------
model StockBought {
  id         String   @id @default(uuid())
  signature  String   @unique
  slot       BigInt
  blockTime  DateTime?
  fandomId   Bytes
  character  String
  buyer      String
  lamportsIn BigInt
  sharesOut  BigInt
  priceFp    BigInt
  newSupply  BigInt
  ts         BigInt
  createdAt  DateTime @default(now())
  @@map("stock_bought")
}

model StockSold {
  id          String   @id @default(uuid())
  signature   String   @unique
  slot        BigInt
  blockTime   DateTime?
  fandomId    Bytes
  character   String
  seller      String
  sharesIn    BigInt
  lamportsOut BigInt
  priceFp     BigInt
  newSupply   BigInt
  ts          BigInt
  createdAt   DateTime @default(now())
  @@map("stock_sold")
}

// --------------------
// Polls
// --------------------
model PollCreated {
  id              String           @id @default(uuid())
  signature       String           @unique
  slot            BigInt
  blockTime       DateTime?
  pollId          Bytes            @unique
  creator         String
  startTs         BigInt
  endTs           BigInt
  challengeEndTs  BigInt
  status          String
  createdAt       DateTime         @default(now())

  // relation to fandom
  fandomId        Bytes
  fandom          FandomCreated    @relation(fields: [fandomId], references: [fandomId])

  // related sub-events
  votes           VoteCast[]
  resolutions     PollResolved[]
  settlements     PollSettled[]
  disputes        DisputeOpened[]
  rewards         RewardClaimed[]

  @@map("poll_created")
}

// --------------------
// Vote + Resolution + Reward
// --------------------
model VoteCast {
  id         String        @id @default(uuid())
  signature  String        @unique
  slot       BigInt
  blockTime  DateTime?
  voter      String
  side       String
  stake      BigInt
  createdAt  DateTime      @default(now())

  poll       PollCreated   @relation(fields: [pollId], references: [pollId])
  pollId     Bytes

  @@map("vote_cast")
}

model PollResolved {
  id        String        @id @default(uuid())
  signature String        @unique
  slot      BigInt
  blockTime DateTime?
  outcome   String
  createdAt DateTime       @default(now())

  poll      PollCreated    @relation(fields: [pollId], references: [pollId])
  pollId    Bytes

  @@map("poll_resolved")
}

model DisputeOpened {
  id          String       @id @default(uuid())
  signature   String       @unique
  slot        BigInt
  blockTime   DateTime?
  side        String
  challenger  String
  stake       BigInt
  createdAt   DateTime      @default(now())

  poll        PollCreated   @relation(fields: [pollId], references: [pollId])
  pollId      Bytes

  @@map("dispute_opened")
}

model PollSettled {
  id           String       @id @default(uuid())
  signature    String       @unique
  slot         BigInt
  blockTime    DateTime?
  finalOutcome String
  totalStake   BigInt
  payoutPool   BigInt
  createdAt    DateTime     @default(now())

  poll         PollCreated  @relation(fields: [pollId], references: [pollId])
  pollId       Bytes

  @@map("poll_settled")
}

model RewardClaimed {
  id        String       @id @default(uuid())
  signature String       @unique
  slot      BigInt
  blockTime DateTime?
  user      String
  amount    BigInt
  challenge Boolean
  createdAt DateTime     @default(now())

  poll      PollCreated  @relation(fields: [pollId], references: [pollId])
  pollId    Bytes

  @@map("reward_claimed")
}
